{
	"info": {
		"_postman_id": "3852aa54-a22e-4a54-b766-1bca6da71a07",
		"name": "parcial-mateo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27174120",
		"_collection_link": "https://dark-eclipse-211720.postman.co/workspace/eee47d16-0ecc-47e8-8351-67a8ef39e942/collection/27174120-3852aa54-a22e-4a54-b766-1bca6da71a07?action=share&source=collection_link&creator=27174120"
	},
	"item": [
		{
			"name": "cities",
			"item": [
				{
					"name": "Create valid city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"city_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Buenos Aires\",\n    \"country\":\"Argentina\",\n    \"habitants\":122 \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create invalid city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"   pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The country of the city is not valid: Must be Argentina, Ecuador or Paraguay\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Buenos Aires\",\n    \"country\":\"India\",\n    \"habitants\":122 \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain all cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of cities > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain city by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain cities by wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The city with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"Paraguay\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update wrong city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The city with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"Paraguay\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete wrong city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The city with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "supermarkets",
			"item": [
				{
					"name": "Create valid supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"supermarket_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jumbo011111111\",\n    \"latitude\": \"001-001-001-001\",\n    \"longitude\": \"001-001-001-001\",\n    \"website\": \"www.jumbo.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/supermarkets",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create invalid supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"   pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The name of the supermarket must be at least 10 characters long\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jumbo\",\n    \"latitude\": \"001-001-001-001\",\n    \"longitude\": \"001-001-001-001\",\n    \"website\": \"www.jumbo.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/supermarkets",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain all supermarkets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of supermarkets > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/supermarkets",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain supermarket by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/supermarkets/{{supermarket_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain supermarket by wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/supermarkets/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jumbo02222222222\",\n    \"latitude\": \"001-001-001-001\",\n    \"longitude\": \"001-001-001-001\",\n    \"website\": \"www.jumbo.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/supermarkets/{{supermarket_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update wrong supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jumbo011111111\",\n    \"latitude\": \"001-001-001-001\",\n    \"longitude\": \"001-001-001-001\",\n    \"website\": \"www.jumbo.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/supermarkets/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/supermarkets/{{supermarket_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete wrong supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/supermarkets/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cities-supermarkets",
			"item": [
				{
					"name": "Create valid city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"city_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Buenos Aires\",\n    \"country\":\"Argentina\",\n    \"habitants\":122 \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create valid supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"supermarket_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jumbo011111111\",\n    \"latitude\": \"001-001-001-001\",\n    \"longitude\": \"001-001-001-001\",\n    \"website\": \"www.jumbo.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/supermarkets",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 2 valid supermarket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"supermarket_id_2\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Jumbo011111111\",\n    \"latitude\": \"001-001-001-001\",\n    \"longitude\": \"001-001-001-001\",\n    \"website\": \"www.jumbo.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/supermarkets",
							"host": [
								"{{URL}}"
							],
							"path": [
								"supermarkets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign supermarket to city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()",
									"pm.globals.set(\"airline_id\", data.id);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"   pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign wrong supermarket to city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain all supermarkets from city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Number of supermarkets > ' + 0, function () {",
									"   var data = pm.response.json()",
									"   pm.expect(data.length).to.greaterThan(0)",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain supermarket from city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtain supermarket not linked to city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {",
									"   pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id is not associated to the city\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update supermarkets from city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"   pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"{{supermarket_id}}\",\n        \"name\": \"Jumbo011111111\",\n        \"latitude\": \"001-001-001-001\",\n        \"longitude\": \"001-001-001-001\",\n        \"website\": \"www.jumbo.com\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update wrong supermarkets on city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"id\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"Jumbo011111111\",\n        \"latitude\": \"001-001-001-001\",\n        \"longitude\": \"001-001-001-001\",\n        \"website\": \"www.jumbo.com\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete supermarket from city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"   pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/{{supermarket_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"{{supermarket_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete supermarket not linked to city",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"   pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Get expected error message\", function () {",
									"   var data = pm.response.json();",
									"   pm.expect(data.message).to.eql(\"The supermarket with the given id was not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/cities/{{city_id}}/supermarkets/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"cities",
								"{{city_id}}",
								"supermarkets",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "localhost:3000"
		}
	]
}